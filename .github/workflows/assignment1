"""Assignment 1.
"""

import math

# Maximum number of characters in a valid tweet.
MAX_TWEET_LENGTH = 50

# The first character in a hashtag.
HASHTAG_SYMBOL = '#'

# The first character in a mention.
MENTION_SYMBOL = '@'

# Underscore is the only non-alphanumeric character that can be part
# of a word (or username) in a tweet.
UNDERSCORE = '_'

SPACE = ' '


def is_valid_tweet(text: str) -> bool:
    """Return True if and only if text contains between 1 and
    MAX_TWEET_LENGTH characters (inclusive).

    >>> is_valid_tweet('Hello Twitter!')
    True
    >>> is_valid_tweet('')
    False
    >>> is_valid_tweet(2 * 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    False

    """

    # Complete the body of this function.
    if len(text) < 1 or len(text) > MAX_TWEET_LENGTH:
        return False
    else:
        return True
# Now define the other functions described in the handout.

def compare_tweet_lengths(first_tweet: str, second_tweet: str) -> int:
    """Compare the lengths of two tweets. Return 1 if first_tweet is longer than
    second_tweet, -1 if first_tweet is shorter than second_tweet, and 0 if 
    first_tweet and second_tweet are the same length.
    
    Precondition: length of first_tweet and length of second_tweet must be 
    between 1 and 250, inclusive
    
    >>>compare_tweet_lengths('I love Friday', "It's Friday")
    1
    >>>compare_tweet_lengths('Pizza is good', 'My favourite food is pizza')
    -1
    >>>compare_tweet_lengths('I love cats', 'I love dogs')
    0
    """
    
    if len(first_tweet) > len(second_tweet):
        return 1
    elif len(second_tweet) > len(first_tweet):
        return -1
    else:
        return 0
    
def add_hashtag(valid_tweet: str, tweet_word: str) -> str:
    """Return a potentially valid tweet by combining valid_tweet with 
    #tweet_word.
    
    Precondition: len(valid_tweet) <= MAX_TWEET_LENGTH
    
    >>>add_hashtag('I love', 'dogs')
    'I love #dogs'
    >>>add_hashtag('Who has seen the brand new episode from yesterday', 'GOT')
    'Who has seen the brand new episode from yesterday'
    """
    
    if (len(valid_tweet) + len(tweet_word) + 2) <= MAX_TWEET_LENGTH:
        return valid_tweet + SPACE + HASHTAG_SYMBOL + tweet_word
    else:
        return valid_tweet
        
    
# A helper function.  Do not modify this function, but you are welcome
# to call it.

def clean(text: str) -> str:
    """Return text with every non-alphanumeric character, except for
    HASHTAG_SYMBOL, MENTION_SYMBOL, and UNDERSCORE, replaced with a
    SPACE, and each HASHTAG_SYMBOL replaced with a SPACE followed by
    the HASHTAG_SYMBOL, and each MENTION_SYMBOL replaced with a SPACE
    followed by a MENTION_SYMBOL.

    >>> clean('A! lot,of punctuation?!!')
    'A  lot of punctuation   '
    >>> clean('With#hash#tags? and@mentions?in#twe_et #end')
    'With #hash #tags  and @mentions in #twe_et  #end'
    """

    clean_str = ''
    for char in text:
        if char.isalnum() or char == UNDERSCORE:
            clean_str = clean_str + char
        elif char == HASHTAG_SYMBOL or char == MENTION_SYMBOL:
            clean_str = clean_str + SPACE + char
        else:
            clean_str = clean_str + SPACE
    return clean_str

def contains_hashtag(valid_tweet: str, tweet_word: str) -> bool:
    """Return true if valid_tweet contains a hashtag made up of the HASH_SYMBOL
    and tweet_word
    
    Precondition: len(valid_tweet) <= MAX_TWEET_LENGTH
    
    >>>contains_hashtag("I love #csc108", "csc108")
    True
    >>>contains_hashtag("I love #csc108", "108")
    False
    """
    
    return (HASHTAG_SYMBOL + tweet_word) in clean(valid_tweet) 

def is_mentioned(valid_tweet: str, tweet_word: str) -> bool:
    """Return true if valid_tweet contains a mention made up of the 
    MENTION_SYMBOL and tweet_word
    
    Precondition: len(valid_tweet) <= MAX_TWEET_LENGTH
    
    >>>is_mentioned('Go @Raptors', 'Raptors')
    True
    >>>is_mentioned('Go Raptors', 'Raptors')
    False
    """
    return (MENTION_SYMBOL + tweet_word) in clean(valid_tweet)
    
def add_mention_exclusive(valid_tweet: str, tweet_word: str) -> str:
    """Return a potential tweet that contains tweet_word as a mention in 
    valid_tweet. A potential tweet is valid_tweet, followed by a SPACE, 
    followed by MENTION_SYMBOL and tweet_word at the end of the valid_tweet. 
    If the potential tweet is invalid, then return valid_tweet. 
    
    Precondition: len(valid_tweet) <= MAX_TWEET_LENGTH
    
    >>>add_mention_exclusive('Go Raptors!', 'Raptors')
    'Go Raptors! @Raptors'
    >>>add_mention_exclusive('Go @Raptors!', 'Raptors')
    'Go @Raptors!'
    """
    
    if is_mentioned(valid_tweet, tweet_word):
        return valid_tweet
    elif len(valid_tweet) + len(tweet_word) + 2 > MAX_TWEET_LENGTH:
        return valid_tweet
    elif tweet_word[0] == MENTION_SYMBOL:
        return valid_tweet
    else:
        return valid_tweet + SPACE + MENTION_SYMBOL + tweet_word
    
def num_tweets_required(message: str) -> int:     
    """Return the minimum number of tweets required to write the entire message.
    
    >>>num_tweets_required("Matthew is on an exercise regime according to his 
    doctor's recommendation. He weighs himself once every week on his bathroom 
    scale.")
    3
    >>>num_tweets_required("Hello my name is: ")
    1
    """
    
    return math.ceil(len(message)/MAX_TWEET_LENGTH)

def get_nth_tweet(message: str, n: int) -> str:
    """Return the nth valid tweet in the sequence of tweets split up from 
    message. If the value of n is too large, return empty string.
    
    Precondition: n > 0
    
    >>>get_nth_tweet("Matthew is on an exercise regime according to his 
    doctor's recommendation. He weighs himself once every week on his bathroom 
    scale.", 2)
    "doctor's recommendation. He weighs himself once ev"
    >>>get_nth_tweet("Hello my name is: ", 2)
    ''
    """

    num_of_tweets = num_tweets_required(message)
    
    if num_of_tweets < n:
        return ''
    
    index = (MAX_TWEET_LENGTH * n)
    return message[index - MAX_TWEET_LENGTH:index]
